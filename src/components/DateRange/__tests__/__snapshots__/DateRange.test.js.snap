// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Tests for the connected DateRange should render with given state from Redux store 1`] = `
.c2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  margin: 25px 0 0 80px;
}

.c2 button {
  margin-right: 0.2em;
}

.c2 label {
  margin-right: 0.4em;
  font-size: 0.9em;
  font-weight: bold;
  text-transform: uppercase;
}

.c3 {
  position: relative;
  padding: 0.2em 1.5em;
  color: #000;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #fff;
  border: 1px solid #000;
  border-radius: 2px;
  cursor: pointer;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  outline: none;
}

.c3:focus,
.c3.focus {
  -webkit-text-decoration: none;
  text-decoration: none;
  outline: 0;
}

.c3:active,
.c3.is-active {
  color: #fff;
  background-color: #000;
  background-image: none;
  outline: 0;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

.c3:disabled {
  cursor: auto;
  opacity: 0.65;
}

.c4 {
  position: relative;
  padding: 0.2em 1em;
  color: #000;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #fff;
  border: 0;
  border-radius: 2px;
  cursor: pointer;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  outline: none;
}

.c4:focus,
.c4.focus {
  -webkit-text-decoration: none;
  text-decoration: none;
  outline: 0;
}

.c4:active,
.c4.is-active {
  background-color: #ececec;
  background-image: none;
  outline: 0;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

.c4:disabled {
  cursor: auto;
  opacity: 0.65;
}

.c0 {
  padding-bottom: 4.8rem;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c1 {
  width: 85%;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

<div
  className="c0"
>
  <div
    className="c1"
  >
    <span
      className="MuiSlider-root MuiSlider-colorPrimary"
      onMouseDown={[Function]}
    >
      <span
        className="MuiSlider-rail"
      />
      <span
        className="MuiSlider-track"
        style={
          Object {
            "left": "0%",
            "width": "100%",
          }
        }
      />
      <input
        type="hidden"
        value="0,72"
      />
      <span
        aria-orientation="horizontal"
        aria-valuemax={72}
        aria-valuemin={0}
        aria-valuenow={0}
        className="MuiSlider-thumb MuiSlider-thumbColorPrimary"
        data-index={0}
        onBlur={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onMouseLeave={[Function]}
        onMouseOver={[Function]}
        role="slider"
        style={
          Object {
            "left": "0%",
          }
        }
        tabIndex={0}
      />
      <span
        aria-orientation="horizontal"
        aria-valuemax={72}
        aria-valuemin={0}
        aria-valuenow={72}
        className="MuiSlider-thumb MuiSlider-thumbColorPrimary"
        data-index={1}
        onBlur={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onMouseLeave={[Function]}
        onMouseOver={[Function]}
        role="slider"
        style={
          Object {
            "left": "100%",
          }
        }
        tabIndex={0}
      />
    </span>
  </div>
  <div
    className="c2"
  >
    <label>
      Timespan:
    </label>
    <button
      className="c3"
      onClick={[Function]}
    >
      1 month
    </button>
    <button
      className="c3"
      onClick={[Function]}
    >
      3 months
    </button>
    <button
      className="c3"
      onClick={[Function]}
    >
      6 months
    </button>
    <button
      className="c3"
      onClick={[Function]}
    >
      1 year
    </button>
    <button
      className="c3"
      onClick={[Function]}
    >
      Max
    </button>
    <button
      className="c4"
      onClick={[Function]}
    >
      Reset
    </button>
  </div>
</div>
`;
